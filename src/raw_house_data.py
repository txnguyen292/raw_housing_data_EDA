# -*- coding: utf-8 -*-
"""raw_house_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QhjClr13dcki0-HpUiw6WnaUedTT7wgY

## Data Exploratory Analysis

## Data Processing
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import scipy as sp

data = pd.read_csv("raw_house_data.csv")
data.head()

data.shape

data.columns

data.info()

"""The table above shows that there are 10 missing values in the lot_acres variable. Moreover, there are 7 categorical variables and 9 numerical ones. Let's investigate further into these variables."""

# numerical variables
numVars = data.select_dtypes(include=np.number).columns.tolist()
# categorical var
catVars = [x for x in data.columns if x not in numVars]
catVars

data[catVars].head()

"""bathrooms, sqrt_ft and garage seem more appropriate as numerical variables. Let's investigate these variables."""

# Unique values of garage variable
data["garage"].unique()

# Unique values of bathroom variable
data["bathrooms"].unique()

# Unique values of fireplaces variable
data["fireplaces"].unique()

# Unique values of sqrt_ft variable
data["sqrt_ft"].unique()

"""The unique values of these variables shows that they should be numerical. Furthermore, there are missing values encoded as "None", "", in these variables. We should also handle these missing values later."""

cat_to_num_vars = ["bathrooms", "garage", "fireplaces", "sqrt_ft"]

data[numVars].head()

data["zipcode"].unique()

num_to_cat_vars = ["zipcode"]

"""Although zipcode is encoded numerically, it should be a categorical variables. """

print("Number of unique values of MLS:")
len(data["MLS"].unique())

"""There are 5000 unique MLS corresponding 5000 observations. It looks like this variable is not very useful as it acts similar to the index. I will drop this variable."""

numVars1 = numVars + cat_to_num_vars
numVars1.remove("MLS")
numVars1.remove("zipcode")
catVars1 = [x for x in catVars if x not in cat_to_num_vars]
catVars1 = catVars1 + num_to_cat_vars
catVars1

data1 = data[numVars1+catVars1]
data1.head()

# Convert variables from string to float 
for i in cat_to_num_vars:
    data1[i] = pd.to_numeric(data1[i], errors="coerce")
data1.info()

"""## Handling Missing Values"""

data1.info()

"""Since there are not a lot of missing values in our numerical dataset, I'll just drop these observations."""

data2 = data1.dropna()
data2.shape

data1.shape

# Categorical Variables 
data2[catVars1].head()

"""As shown in the table above, there are missing values in these variables encoded as "None". We'll check to see how many missing values are there."""

catVarsToCheck = [x for x in catVars1 if x != "zipcode"]
for i in catVarsToCheck:
    if i == "zipcode":
        pass
    count = 0
    for idx, val in enumerate(data2[i].values):
        if val == "None":
            count += 1
    print(f"Variable {i}, total number of missing values:", count)

"""HOA is not necessary in a housing unit. Therefore, although the values are encoded as None, it does not mean it is missing. We'll encode these values as -1. For the kitchen variable, I'll remove the missing values."""

data2["HOA"] = pd.to_numeric(data2["HOA"], errors="coerce")
data2["HOA"].fillna(-1, inplace=True)
data2.info()

data2.loc[data2["kitchen_features"] != "None"].shape

# Save data to csv file
data2.to_csv("cleaned_raw_house_data.csv")

"""## Data Analysis

### Dealing with outliers
"""

numVarsToPlot = [x for x in numVars1 if x not in ["longitude", "latitude", "year_built"]]
n_rows = 2
n_cols = len(numVarsToPlot) // 2
count = 0

fig, ax = plt.subplots(n_rows, n_cols, figsize=(12,15))
for idx, var in enumerate(numVarsToPlot):
    plt.subplot(n_rows, n_cols, count+1)
    sns.boxplot(data2[var], orient="vertical")
    count += 1
fig.suptitle("Original Data Box Plots", fontsize=25)
plt.show()

"""There are many outliers in our dataset. I will winsorize the data to reduce the effects of the outliers"""

data3 = data2.copy()
for col in data2[numVarsToPlot].columns:
    data3[col] = sp.stats.mstats.winsorize(data2[col], limits=0.05)

# Boxplots of numerical values after winsorizing
n_rows = 2
n_cols = len(numVarsToPlot) // 2
count = 0

fig, ax = plt.subplots(n_rows, n_cols, figsize=(12,15))

for idx, var in enumerate(numVarsToPlot):
    plt.subplot(n_rows, n_cols, count+1)
    sns.boxplot(data3[var], orient="vertical")
    count += 1
fig.suptitle("Winsorized Box Plots", fontsize=25)
plt.show()

data3.columns

sns.boxplot(x="bedrooms", y="sold_price", data=data3).set_title("Comparing selling prices of housing units by number of bedrooms", fontsize=15)

sns.boxplot(x="bathrooms", y="sold_price", data=data3).set_title("Comparing selling prices of housing units by number of bathrooms", fontsize=15)

sns.boxplot(x="fireplaces", y="sold_price", data=data3).set_title("Comparing selling prices of housing units by number of fireplaces", fontsize=15)

sns.scatterplot("sold_price", "sqrt_ft", data=data3).set_title("Scatter Plot of housing price and its area")

sns.scatterplot("lot_acres", "sold_price", data=data3).set_title("Scatter Plot of housing price and its lot_acres")

data3.plot(kind="scatter", x="longitude", y="latitude",
    s=data3['sqrt_ft']/50, label="house area",
    c="sold_price", cmap=plt.get_cmap("jet"),
    colorbar=True, alpha=0.4, figsize=(10,7),
)
plt.title("Map of housing units", fontsize=25)
plt.legend()
plt.show()

